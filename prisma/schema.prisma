// Schema Prisma para SaaS Multi-tenant
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// MODELOS CORE (TENANT)
// ========================================

model Client {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique // Para identificar via subdomínio
  email     String   @unique
  phone     String?
  logo      String?
  website   String?
  status    ClientStatus @default(ACTIVE)
  
  // Configurações específicas
  settings  Json     @default("{}")
  
  // Controle de assinatura
  plan      String   @default("basic")
  expiresAt DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  users          User[]
  appointments   Appointment[]
  orders         Order[]
  products       Product[]
  services       Service[]
  employees      Employee[]
  categories     Category[]
  properties     Property[]
  propertyVisits PropertyVisit[]
  propertyLeads  PropertyLead[]
  stockMovements StockMovement[]
  suppliers      Supplier[]
  doctors        Doctor[]
  doctorAppointments DoctorAppointment[]
  patients       Patient[]
  
  @@map("clients")
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TRIAL
}

// ========================================
// GESTÃO DE USUÁRIOS E AUTENTICAÇÃO
// ========================================

model User {
  id        String   @id @default(uuid())
  clientId  String   @map("client_id")
  
  // Dados pessoais
  name      String
  email     String
  phone     String?
  avatar    String?
  
  // Autenticação
  password  String
  role      UserRole @default(CLIENT)
  status    UserStatus @default(ACTIVE)
  
  // Controle de tentativas de login
  failedLoginAttempts Int @default(0)
  lockedUntil        DateTime?
  lastLogin          DateTime?
  
  // Email verification
  emailVerified      Boolean @default(false)
  emailVerifiedAt    DateTime?
  emailVerificationToken String?
  
  // Reset de senha
  passwordResetToken String?
  passwordResetTokenExpiresAt DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  client         Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  appointments   Appointment[]
  orders         Order[]
  refreshTokens  RefreshToken[]
  stockMovements StockMovement[]
  
  @@unique([clientId, email])
  @@map("users")
}

enum UserRole {
  SUPER_ADMIN    // Seu acesso especial
  ADMIN          // Admin da empresa cliente
  EMPLOYEE       // Funcionário da empresa
  CLIENT         // Cliente final
  GUEST          // Visitante (limitado)
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

// ========================================
// FUNCIONÁRIOS E SERVIÇOS
// ========================================

model Employee {
  id          String   @id @default(uuid())
  clientId    String   @map("client_id")
  
  name        String
  email       String
  phone       String?
  avatar      String?
  position    String
  description String?
  
  // Disponibilidade
  workingHours Json    @default("{}")
  isActive     Boolean @default(true)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  client       Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  services     Service[]
  doctors      Doctor[]
  
  @@unique([clientId, email])
  @@map("employees")
}

model Service {
  id          String   @id @default(uuid())
  clientId    String   @map("client_id")
  categoryId  String?  @map("category_id")
  
  name        String
  description String?
  duration    Int      // em minutos
  price       Decimal  @db.Decimal(10, 2)
  isActive    Boolean  @default(true)
  
  // Configurações
  maxAdvanceBooking Int? // dias de antecedência máxima
  minAdvanceBooking Int? // dias de antecedência mínima
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  client       Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  category     Category? @relation(fields: [categoryId], references: [id])
  employees    Employee[]
  appointments Appointment[]
  
  @@map("services")
}

// ========================================
// AGENDAMENTOS
// ========================================

model Appointment {
  id          String   @id @default(uuid())
  clientId    String   @map("client_id")
  userId      String   @map("user_id")
  employeeId  String   @map("employee_id")
  serviceId   String   @map("service_id")
  
  // Detalhes do agendamento
  startTime   DateTime
  endTime     DateTime
  status      AppointmentStatus @default(SCHEDULED)
  notes       String?
  description String?
  
  // Pagamento
  price       Decimal? @db.Decimal(10, 2)
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  client   Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])
  employee Employee @relation(fields: [employeeId], references: [id])
  service  Service  @relation(fields: [serviceId], references: [id])
  
  @@map("appointments")
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

// ========================================
// PEDIDOS E PRODUTOS
// ========================================

model Category {
  id       String @id @default(uuid())
  clientId String @map("client_id")
  
  name        String
  description String?
  color       String?
  type        String? // 'product', 'service', 'appointment'
  isActive    Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  client   Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  products Product[]
  services Service[]
  
  @@map("categories")
}

model Product {
  id         String  @id @default(uuid())
  clientId   String  @map("client_id")
  categoryId String? @map("category_id")
  
  name        String
  description String?
  price       Decimal @db.Decimal(10, 2)
  image       String?
  images      String[] @default([])
  sku         String?
  
  // Estoque
  stock       Int     @default(0)
  minStock    Int     @default(0)
  
  // Status
  isActive    Boolean @default(true)
  isFeatured  Boolean @default(false)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  client     Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  category   Category?  @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  stockMovements StockMovement[]
  
  @@unique([clientId, sku])
  @@map("products")
}

model Order {
  id       String @id @default(uuid())
  clientId String @map("client_id")
  userId   String @map("user_id")
  
  // Detalhes do pedido
  orderNumber String  @unique
  status      OrderStatus @default(PENDING)
  total       Decimal @db.Decimal(10, 2)
  
  // Entrega
  deliveryAddress String?
  deliveryFee     Decimal? @db.Decimal(10, 2)
  
  // Pagamento
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  client Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user   User       @relation(fields: [userId], references: [id])
  items  OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String @map("order_id")
  productId String @map("product_id")
  
  quantity   Int
  price      Decimal @db.Decimal(10, 2)
  subtotal   Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)
  
  // Relacionamentos
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

// ========================================
// AUDITORIA E LOGS
// ========================================

model AuditLog {
  id       String @id @default(uuid())
  clientId String @map("client_id")
  
  userId   String? @map("user_id")
  action   String  // CREATE, UPDATE, DELETE, LOGIN, etc
  entity   String  // tabela afetada
  entityId String? @map("entity_id")
  
  // Dados da alteração
  oldValues Json?
  newValues Json?
  
  // Metadata
  ipAddress String?
  userAgent String?
  
  createdAt DateTime @default(now())
  
  @@map("audit_logs")
}

// ========================================
// EXTENSÕES PARA TESTES MULTI-TENANT
// ========================================

// Para IMOBILIÁRIA
model Property {
  id          String   @id @default(uuid())
  clientId    String   @map("client_id")
  
  title       String
  description String?
  type        PropertyType
  status      PropertyStatus @default(AVAILABLE)
  
  // Localização
  address     String
  city        String
  state       String
  zipCode     String   @map("zip_code")
  neighborhood String?
  
  // Características
  bedrooms    Int?
  bathrooms   Int?
  area        Decimal? @db.Decimal(10, 2) // em m²
  parkingSpots Int?    @map("parking_spots")
  
  // Financeiro
  price       Decimal  @db.Decimal(12, 2)
  rentPrice   Decimal? @db.Decimal(10, 2) // se for para aluguel
  condoFee    Decimal? @db.Decimal(10, 2) @map("condo_fee")
  iptu        Decimal? @db.Decimal(10, 2)
  
  // Mídia
  images      Json     @default("[]") // URLs das imagens
  virtual360  String?  @map("virtual_360") // URL do tour virtual
  
  // Informações extras
  amenities   Json     @default("[]") // piscina, academia, etc
  features    Json     @default("[]") // ar condicionado, mobiliado, etc
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  client      Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  visits      PropertyVisit[]
  leads       PropertyLead[]
  
  @@map("properties")
}

enum PropertyType {
  HOUSE          // Casa
  APARTMENT      // Apartamento
  COMMERCIAL     // Comercial
  LAND           // Terreno
  FARM           // Fazenda
  WAREHOUSE      // Galpão
}

enum PropertyStatus {
  AVAILABLE      // Disponível
  RESERVED       // Reservado
  SOLD           // Vendido
  RENTED         // Alugado
  MAINTENANCE    // Em manutenção
  INACTIVE       // Inativo
}

model PropertyVisit {
  id         String   @id @default(uuid())
  propertyId String   @map("property_id")
  clientId   String   @map("client_id")
  
  // Dados do visitante
  visitorName  String @map("visitor_name")
  visitorEmail String @map("visitor_email")
  visitorPhone String @map("visitor_phone")
  
  // Agendamento
  scheduledAt  DateTime @map("scheduled_at")
  status       VisitStatus @default(SCHEDULED)
  notes        String?
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relacionamentos
  client   Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@map("property_visits")
}

model PropertyLead {
  id         String   @id @default(uuid())
  propertyId String   @map("property_id")
  clientId   String   @map("client_id")
  
  // Dados do lead
  name       String
  email      String
  phone      String
  message    String?
  source     String?  // site, whatsapp, telefone, etc
  
  // Status
  status     LeadStatus @default(NEW)
  priority   LeadPriority @default(MEDIUM)
  
  // Timestamps
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relacionamentos
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@map("property_leads")
}

enum VisitStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  NEGOTIATING
  CLOSED_WON
  CLOSED_LOST
}

enum LeadPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Para ESTOQUE DE PEÇAS
model StockMovement {
  id        String   @id @default(uuid())
  clientId  String   @map("client_id")
  productId String   @map("product_id")
  userId    String   @map("user_id")
  
  type      MovementType
  quantity  Int
  reason    String?
  
  // Preços
  unitCost  Decimal? @db.Decimal(10, 2) @map("unit_cost")
  totalCost Decimal? @db.Decimal(10, 2) @map("total_cost")
  
  // Referências
  orderId      String? @map("order_id")
  supplierId   String? @map("supplier_id")
  batchNumber  String? @map("batch_number")
  expiryDate   DateTime? @map("expiry_date")
  
  // Timestamps
  createdAt DateTime @default(now())
  
  // Relacionamentos
  client  Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])
  
  @@map("stock_movements")
}

enum MovementType {
  IN          // Entrada
  OUT         // Saída
  ADJUSTMENT  // Ajuste
  TRANSFER    // Transferência
  LOSS        // Perda
  RETURN      // Devolução
}

model Supplier {
  id       String @id @default(uuid())
  clientId String @map("client_id")
  
  name     String
  document String? // CNPJ/CPF
  email    String?
  phone    String?
  address  String?
  
  // Status
  isActive Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@unique([clientId, document])
  @@map("suppliers")
}

// Para CLÍNICA MÉDICA - Expansão dos agendamentos
model Doctor {
  id          String   @id @default(uuid())
  clientId    String   @map("client_id")
  employeeId  String   @map("employee_id") // Referência ao Employee
  
  // Dados médicos
  crm         String
  specialty   String
  subSpecialty String? @map("sub_specialty")
  
  // Configurações
  consultationDuration Int @default(30) @map("consultation_duration") // minutos
  consultationPrice    Decimal @db.Decimal(10, 2) @map("consultation_price")
  
  // Horários de atendimento específicos
  schedule    Json @default("{}")
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  client       Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  appointments DoctorAppointment[]
  
  @@unique([clientId, crm])
  @@map("doctors")
}

model DoctorAppointment {
  id        String   @id @default(uuid())
  clientId  String   @map("client_id")
  doctorId  String   @map("doctor_id")
  patientId String   @map("patient_id")
  
  // Agendamento
  scheduledAt DateTime @map("scheduled_at")
  duration    Int      @default(30)
  status      AppointmentStatus @default(SCHEDULED)
  
  // Informações médicas
  symptoms    String?
  diagnosis   String?
  prescription String?
  notes       String?
  
  // Financeiro
  price       Decimal @db.Decimal(10, 2)
  paymentStatus PaymentStatus @default(PENDING)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  client  Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  doctor  Doctor  @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  @@map("doctor_appointments")
}

model Patient {
  id       String @id @default(uuid())
  clientId String @map("client_id")
  
  // Dados pessoais
  name     String
  email    String?
  phone    String
  document String? // CPF
  birthDate DateTime? @map("birth_date")
  gender   Gender?
  
  // Endereço
  address  String?
  city     String?
  state    String?
  zipCode  String? @map("zip_code")
  
  // Informações médicas
  bloodType    String? @map("blood_type")
  allergies    String?
  medications  String?
  medicalHistory String? @map("medical_history")
  emergencyContact String? @map("emergency_contact")
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  client       Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  appointments DoctorAppointment[]
  
  @@unique([clientId, document])
  @@map("patients")
}

enum Gender {
  MALE
  FEMALE
  OTHER
} 