generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id                 String              @id @default(uuid())
  name               String
  slug               String              @unique
  email              String              @unique
  phone              String?
  logo               String?
  website            String?
  status             ClientStatus        @default(ACTIVE)
  settings           Json                @default("{}")
  plan               String              @default("basic")
  expiresAt          DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  appointments       Appointment[]
  categories         Category[]
  coupons            Coupon[]
  customers          Customer[]
  doctorAppointments DoctorAppointment[]
  doctors            Doctor[]
  ecommerceOrders    EcommerceOrder[]
  employees          Employee[]
  orders             Order[]
  patients           Patient[]
  payments           Payment[]
  products           Product[]
  properties         Property[]
  propertyLeads      PropertyLead[]
  propertyVisits     PropertyVisit[]
  services           Service[]
  stockMovements     StockMovement[]
  suppliers          Supplier[]
  users              User[]
  annotations        Annotation[]
  cacheMetadata      CacheMetadata[]
  schedules          Schedule[]

  @@map("clients")
}

model User {
  id                          String          @id @default(uuid())
  clientId                    String          @map("client_id")
  employeeId                  String?         @map("employee_id")
  name                        String
  email                       String
  phone                       String?
  avatar                      String?
  password                    String
  role                        UserRole        @default(CLIENT)
  status                      UserStatus      @default(ACTIVE)
  failedLoginAttempts         Int             @default(0)
  lockedUntil                 DateTime?
  lastLogin                   DateTime?
  emailVerified               Boolean         @default(false)
  emailVerifiedAt             DateTime?
  emailVerificationToken      String?
  passwordResetToken          String?
  passwordResetTokenExpiresAt DateTime?
  createdAt                   DateTime        @default(now())
  updatedAt                   DateTime        @updatedAt
  appointments                Appointment[]
  orders                      Order[]
  refreshTokens               RefreshToken[]
  stockMovements              StockMovement[]
  client                      Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  employees                   Employee[]
  employee                    Employee?       @relation("UserEmployee", fields: [employeeId], references: [id], onDelete: SetNull)
  annotations                 Annotation[]
  schedules                   Schedule[]

  @@unique([clientId, email])
  @@unique([clientId, employeeId])
  @@index([clientId, role]) // Índice para queries por client e role
  @@index([email]) // Índice para login
  @@index([status]) // Índice para filtros por status
  @@index([employeeId]) // Índice para busca por employee
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Employee {
  id           String        @id @default(uuid())
  clientId     String        @map("client_id")
  userId       String        @map("user_id")
  name         String
  email        String
  phone        String?
  avatar       String?
  position     String
  description  String?
  workingHours Json          @default("{}")
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  doctors      Doctor[]
  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userEmployee User[]        @relation("UserEmployee")
  services     Service[]     @relation("EmployeeToService")
  annotations  Annotation[]
  schedules    Schedule[]

  @@unique([clientId, email])
  @@unique([clientId, userId])
  @@index([clientId, isActive]) // Índice para funcionários ativos
  @@index([email]) // Índice para busca por email
  @@map("employees")
}

model Service {
  id           String        @id @default(uuid())
  name         String
  description  String?
  duration     Int
  price        Decimal       @db.Decimal(10, 2)
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  categoryId   String?       @map("category_id")
  clientId     String        @map("client_id")
  appointments Appointment[]
  category     Category?     @relation(fields: [categoryId], references: [id])
  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  employees    Employee[]    @relation("EmployeeToService")

  @@index([clientId, isActive]) // Índice para serviços ativos
  @@index([price]) // Índice para ordenação por preço
  @@map("services")
}

model Appointment {
  id          String            @id @default(uuid())
  clientId    String            @map("client_id")
  userId      String            @map("user_id")
  employeeId  String?           @map("employee_id")
  serviceId   String            @map("service_id")
  startTime   DateTime
  endTime     DateTime
  status      AppointmentStatus @default(SCHEDULED)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  employee    Employee?         @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  service     Service           @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  client      Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  annotations Annotation[]

  @@index([clientId, startTime]) // Índice para queries por período
  @@index([clientId, status]) // Índice para filtros por status
  @@index([userId]) // Índice para appointments do usuário
  @@index([employeeId]) // Índice para appointments do funcionário
  @@index([startTime]) // Índice para ordenação por data
  @@map("appointments")
}

// ===== Anotações de sessão =====
enum AnnotationVisibility {
  PRIVATE_TO_EMPLOYEE
  SHARED_WITH_CLIENT
}

model Annotation {
  id            String               @id @default(uuid())
  clientId      String               @map("client_id")
  userId        String               @map("user_id")
  employeeId    String?              @map("employee_id")
  createdById   String               @map("created_by_id")
  createdByRole UserRole             @map("created_by_role")
  appointmentId String?              @map("appointment_id")
  content       String
  visibility    AnnotationVisibility @default(PRIVATE_TO_EMPLOYEE)
  isPinned      Boolean              @default(false) @map("is_pinned")
  createdAt     DateTime             @default(now()) @map("created_at")
  updatedAt     DateTime             @updatedAt @map("updated_at")

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  employee    Employee?    @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  appointment Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  client      Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId, userId, createdAt])
  @@index([appointmentId])
  @@map("annotations")
}

model Category {
  id          String    @id @default(uuid())
  clientId    String    @map("client_id")
  name        String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  color       String?
  type        String?
  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  products    Product[]
  services    Service[]

  @@map("categories")
}

model Product {
  id                  String               @id @default(uuid())
  clientId            String               @map("client_id")
  categoryId          String?              @map("category_id")
  name                String
  description         String?
  price               Decimal              @db.Decimal(10, 2)
  image               String?
  sku                 String?
  stock               Int                  @default(0)
  minStock            Int                  @default(0)
  isActive            Boolean              @default(true)
  isFeatured          Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  images              String[]             @default([])
  cartItems           CartItem[]
  ecommerceOrderItems EcommerceOrderItem[]
  orderItems          OrderItem[]
  productVariants     ProductVariant[]
  category            Category?            @relation(fields: [categoryId], references: [id])
  client              Client               @relation(fields: [clientId], references: [id], onDelete: Cascade)
  reviews             Review[]
  stockMovements      StockMovement[]
  wishlistItems       WishlistItem[]

  @@unique([clientId, sku])
  @@index([clientId, isActive]) // Índice para produtos ativos
  @@index([clientId, categoryId]) // Índice para filtros por categoria
  @@index([stock]) // Índice para produtos com estoque baixo
  @@index([price]) // Índice para ordenação por preço
  @@map("products")
}

model Order {
  id              String        @id @default(uuid())
  clientId        String        @map("client_id")
  userId          String        @map("user_id")
  orderNumber     String        @unique
  status          OrderStatus   @default(PENDING)
  total           Decimal       @db.Decimal(10, 2)
  deliveryAddress String?
  deliveryFee     Decimal?      @db.Decimal(10, 2)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  items           OrderItem[]
  client          Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id])

  @@index([clientId, createdAt]) // Índice para queries por período
  @@index([clientId, status]) // Índice para filtros por status
  @@index([clientId, paymentStatus]) // Índice para filtros de pagamento
  @@index([userId]) // Índice para orders do usuário
  @@index([createdAt]) // Índice para ordenação por data
  @@map("orders")
}

model OrderItem {
  id         String  @id @default(uuid())
  orderId    String  @map("order_id")
  productId  String  @map("product_id")
  quantity   Int
  price      Decimal @db.Decimal(10, 2)
  subtotal   Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model AuditLog {
  id        String   @id @default(uuid())
  clientId  String   @map("client_id")
  userId    String?  @map("user_id")
  action    String
  entity    String
  entityId  String?  @map("entity_id")
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

model Property {
  id           String          @id @default(uuid())
  clientId     String          @map("client_id")
  title        String
  description  String?
  type         PropertyType
  status       PropertyStatus  @default(AVAILABLE)
  address      String
  city         String
  state        String
  zipCode      String          @map("zip_code")
  neighborhood String?
  bedrooms     Int?
  bathrooms    Int?
  area         Decimal?        @db.Decimal(10, 2)
  parkingSpots Int?            @map("parking_spots")
  price        Decimal         @db.Decimal(12, 2)
  rentPrice    Decimal?        @db.Decimal(10, 2)
  condoFee     Decimal?        @map("condo_fee") @db.Decimal(10, 2)
  iptu         Decimal?        @db.Decimal(10, 2)
  images       Json            @default("[]")
  virtual360   String?         @map("virtual_360")
  amenities    Json            @default("[]")
  features     Json            @default("[]")
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  client       Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  leads        PropertyLead[]
  visits       PropertyVisit[]

  @@map("properties")
}

model PropertyVisit {
  id           String      @id @default(uuid())
  propertyId   String      @map("property_id")
  clientId     String      @map("client_id")
  visitorName  String      @map("visitor_name")
  visitorEmail String      @map("visitor_email")
  visitorPhone String      @map("visitor_phone")
  scheduledAt  DateTime    @map("scheduled_at")
  status       VisitStatus @default(SCHEDULED)
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  client       Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  property     Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_visits")
}

model PropertyLead {
  id         String       @id @default(uuid())
  propertyId String       @map("property_id")
  clientId   String       @map("client_id")
  name       String
  email      String
  phone      String
  message    String?
  source     String?
  status     LeadStatus   @default(NEW)
  priority   LeadPriority @default(MEDIUM)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  client     Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  property   Property     @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_leads")
}

model StockMovement {
  id          String       @id @default(uuid())
  clientId    String       @map("client_id")
  productId   String       @map("product_id")
  userId      String       @map("user_id")
  type        MovementType
  quantity    Int
  reason      String?
  unitCost    Decimal?     @map("unit_cost") @db.Decimal(10, 2)
  totalCost   Decimal?     @map("total_cost") @db.Decimal(10, 2)
  orderId     String?      @map("order_id")
  supplierId  String?      @map("supplier_id")
  batchNumber String?      @map("batch_number")
  expiryDate  DateTime?    @map("expiry_date")
  createdAt   DateTime     @default(now())
  client      Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  product     Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id])

  @@map("stock_movements")
}

model Supplier {
  id        String   @id @default(uuid())
  clientId  String   @map("client_id")
  name      String
  document  String?
  email     String?
  phone     String?
  address   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([clientId, document])
  @@map("suppliers")
}

model Doctor {
  id                   String              @id @default(uuid())
  clientId             String              @map("client_id")
  employeeId           String              @map("employee_id")
  crm                  String
  specialty            String
  subSpecialty         String?             @map("sub_specialty")
  consultationDuration Int                 @default(30) @map("consultation_duration")
  consultationPrice    Decimal             @map("consultation_price") @db.Decimal(10, 2)
  schedule             Json                @default("{}")
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  appointments         DoctorAppointment[]
  client               Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  employee             Employee            @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([clientId, crm])
  @@map("doctors")
}

model DoctorAppointment {
  id            String            @id @default(uuid())
  clientId      String            @map("client_id")
  doctorId      String            @map("doctor_id")
  patientId     String            @map("patient_id")
  scheduledAt   DateTime          @map("scheduled_at")
  duration      Int               @default(30)
  status        AppointmentStatus @default(SCHEDULED)
  symptoms      String?
  diagnosis     String?
  prescription  String?
  notes         String?
  price         Decimal           @db.Decimal(10, 2)
  paymentStatus PaymentStatus     @default(PENDING)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  client        Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  doctor        Doctor            @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient       Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("doctor_appointments")
}

model Patient {
  id               String              @id @default(uuid())
  clientId         String              @map("client_id")
  name             String
  email            String?
  phone            String
  document         String?
  birthDate        DateTime?           @map("birth_date")
  gender           Gender?
  address          String?
  city             String?
  state            String?
  zipCode          String?             @map("zip_code")
  bloodType        String?             @map("blood_type")
  allergies        String?
  medications      String?
  medicalHistory   String?             @map("medical_history")
  emergencyContact String?             @map("emergency_contact")
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  appointments     DoctorAppointment[]
  client           Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([clientId, document])
  @@map("patients")
}

model Customer {
  id              String           @id @default(uuid())
  clientId        String           @map("client_id")
  firstName       String           @map("first_name")
  lastName        String           @map("last_name")
  email           String
  phone           String?
  document        String?
  birthDate       DateTime?        @map("birth_date")
  gender          Gender?
  password        String?
  isActive        Boolean          @default(true)
  emailVerified   Boolean          @default(false)
  preferences     Json             @default("{}")
  marketingOptIn  Boolean          @default(true) @map("marketing_opt_in")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lastLoginAt     DateTime?        @map("last_login_at")
  addresses       Address[]
  carts           Cart[]
  client          Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  ecommerceOrders EcommerceOrder[]
  payments        Payment[]
  reviews         Review[]
  wishlists       Wishlist[]

  @@unique([clientId, email])
  @@unique([clientId, document])
  @@map("customers")
}

model Address {
  id             String           @id @default(uuid())
  customerId     String           @map("customer_id")
  label          String?
  isDefault      Boolean          @default(false) @map("is_default")
  type           AddressType      @default(SHIPPING)
  recipientName  String           @map("recipient_name")
  street         String
  number         String
  complement     String?
  neighborhood   String
  city           String
  state          String
  zipCode        String           @map("zip_code")
  country        String           @default("BR")
  latitude       Float?
  longitude      Float?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  customer       Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  billingOrders  EcommerceOrder[] @relation("BillingAddress")
  shippingOrders EcommerceOrder[] @relation("ShippingAddress")

  @@map("addresses")
}

model Cart {
  id         String     @id @default(uuid())
  customerId String     @map("customer_id")
  status     CartStatus @default(ACTIVE)
  expiresAt  DateTime?  @map("expires_at")
  subtotal   Decimal    @default(0) @db.Decimal(10, 2)
  discount   Decimal    @default(0) @db.Decimal(10, 2)
  shipping   Decimal    @default(0) @db.Decimal(10, 2)
  tax        Decimal    @default(0) @db.Decimal(10, 2)
  total      Decimal    @default(0) @db.Decimal(10, 2)
  couponId   String?    @map("coupon_id")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  items      CartItem[]
  coupon     Coupon?    @relation(fields: [couponId], references: [id])
  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id               String          @id @default(uuid())
  cartId           String          @map("cart_id")
  productId        String          @map("product_id")
  productVariantId String?         @map("product_variant_id")
  quantity         Int
  unitPrice        Decimal         @map("unit_price") @db.Decimal(10, 2)
  totalPrice       Decimal         @map("total_price") @db.Decimal(10, 2)
  customizations   Json?           @default("{}")
  notes            String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  cart             Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product          Product         @relation(fields: [productId], references: [id])
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])

  @@map("cart_items")
}

model EcommerceOrder {
  id                String               @id @default(uuid())
  clientId          String               @map("client_id")
  customerId        String               @map("customer_id")
  orderNumber       String               @unique @map("order_number")
  status            EcommerceOrderStatus @default(PENDING)
  shippingAddressId String?              @map("shipping_address_id")
  billingAddressId  String?              @map("billing_address_id")
  subtotal          Decimal              @db.Decimal(10, 2)
  discount          Decimal              @default(0) @db.Decimal(10, 2)
  shippingCost      Decimal              @default(0) @map("shipping_cost") @db.Decimal(10, 2)
  tax               Decimal              @default(0) @db.Decimal(10, 2)
  total             Decimal              @db.Decimal(10, 2)
  paymentStatus     PaymentStatus        @default(PENDING) @map("payment_status")
  paymentMethod     String?              @map("payment_method")
  shippingMethod    String?              @map("shipping_method")
  trackingCode      String?              @map("tracking_code")
  estimatedDelivery DateTime?            @map("estimated_delivery")
  deliveredAt       DateTime?            @map("delivered_at")
  couponId          String?              @map("coupon_id")
  couponDiscount    Decimal              @default(0) @map("coupon_discount") @db.Decimal(10, 2)
  notes             String?
  internalNotes     String?              @map("internal_notes")
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  confirmedAt       DateTime?            @map("confirmed_at")
  shippedAt         DateTime?            @map("shipped_at")
  cancelledAt       DateTime?            @map("cancelled_at")
  items             EcommerceOrderItem[]
  billingAddress    Address?             @relation("BillingAddress", fields: [billingAddressId], references: [id])
  client            Client               @relation(fields: [clientId], references: [id], onDelete: Cascade)
  coupon            Coupon?              @relation(fields: [couponId], references: [id])
  customer          Customer             @relation(fields: [customerId], references: [id])
  shippingAddress   Address?             @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  payments          Payment[]
  reviews           Review[]
  shipments         Shipment[]

  @@map("ecommerce_orders")
}

model EcommerceOrderItem {
  id               String          @id @default(uuid())
  orderId          String          @map("order_id")
  productId        String          @map("product_id")
  productVariantId String?         @map("product_variant_id")
  quantity         Int
  unitPrice        Decimal         @map("unit_price") @db.Decimal(10, 2)
  totalPrice       Decimal         @map("total_price") @db.Decimal(10, 2)
  productName      String          @map("product_name")
  productImage     String?         @map("product_image")
  productSku       String?         @map("product_sku")
  customizations   Json?           @default("{}")
  createdAt        DateTime        @default(now())
  order            EcommerceOrder  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product          Product         @relation(fields: [productId], references: [id])
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])

  @@map("ecommerce_order_items")
}

model Payment {
  id            String          @id @default(uuid())
  clientId      String          @map("client_id")
  customerId    String          @map("customer_id")
  orderId       String?         @map("order_id")
  paymentNumber String          @unique @map("payment_number")
  method        PaymentMethod
  status        PaymentStatus   @default(PENDING)
  amount        Decimal         @db.Decimal(10, 2)
  currency      String          @default("BRL")
  gateway       String?
  gatewayId     String?         @map("gateway_id")
  gatewayData   Json?           @map("gateway_data")
  pixKey        String?         @map("pix_key")
  pixQrCode     String?         @map("pix_qr_code")
  cardLast4     String?         @map("card_last4")
  cardBrand     String?         @map("card_brand")
  installments  Int             @default(1)
  dueDate       DateTime?       @map("due_date")
  paidAt        DateTime?       @map("paid_at")
  failedAt      DateTime?       @map("failed_at")
  refundedAt    DateTime?       @map("refunded_at")
  notes         String?
  failureReason String?         @map("failure_reason")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  client        Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  customer      Customer        @relation(fields: [customerId], references: [id])
  order         EcommerceOrder? @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Shipment {
  id                String             @id @default(uuid())
  orderId           String             @map("order_id")
  trackingCode      String?            @unique @map("tracking_code")
  method            String
  status            ShipmentStatus     @default(PREPARING)
  weight            Float?
  width             Float?
  height            Float?
  length            Float?
  cost              Decimal?           @db.Decimal(10, 2)
  estimatedDelivery DateTime?          @map("estimated_delivery")
  shippedAt         DateTime?          @map("shipped_at")
  deliveredAt       DateTime?          @map("delivered_at")
  notes             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  trackings         ShipmentTracking[]
  order             EcommerceOrder     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("shipments")
}

model ShipmentTracking {
  id         String   @id @default(uuid())
  shipmentId String   @map("shipment_id")
  status     String
  message    String
  location   String?
  datetime   DateTime
  createdAt  DateTime @default(now())
  shipment   Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@map("shipment_trackings")
}

model ProductVariant {
  id           String               @id @default(uuid())
  productId    String               @map("product_id")
  name         String
  sku          String?
  size         String?
  color        String?
  material     String?
  attributes   Json?                @default("{}")
  price        Decimal?             @db.Decimal(10, 2)
  comparePrice Decimal?             @map("compare_price") @db.Decimal(10, 2)
  stock        Int                  @default(0)
  images       String[]             @default([])
  isActive     Boolean              @default(true)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  cartItems    CartItem[]
  orderItems   EcommerceOrderItem[]
  product      Product              @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, sku])
  @@map("product_variants")
}

model Review {
  id           String          @id @default(uuid())
  productId    String          @map("product_id")
  customerId   String          @map("customer_id")
  orderId      String?         @map("order_id")
  rating       Int
  title        String?
  comment      String?
  images       String[]        @default([])
  isPublished  Boolean         @default(false) @map("is_published")
  isVerified   Boolean         @default(false) @map("is_verified")
  response     String?
  respondedAt  DateTime?       @map("responded_at")
  helpfulCount Int             @default(0) @map("helpful_count")
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  customer     Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  order        EcommerceOrder? @relation(fields: [orderId], references: [id])
  product      Product         @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, customerId, orderId])
  @@map("reviews")
}

model Coupon {
  id                   String           @id @default(uuid())
  clientId             String           @map("client_id")
  code                 String
  name                 String
  description          String?
  type                 CouponType
  value                Decimal          @db.Decimal(10, 2)
  minAmount            Decimal?         @map("min_amount") @db.Decimal(10, 2)
  maxDiscount          Decimal?         @map("max_discount") @db.Decimal(10, 2)
  usageLimit           Int?             @map("usage_limit")
  usedCount            Int              @default(0) @map("used_count")
  applicableProducts   String[]         @default([]) @map("applicable_products")
  applicableCategories String[]         @default([]) @map("applicable_categories")
  startsAt             DateTime?        @map("starts_at")
  expiresAt            DateTime?        @map("expires_at")
  isActive             Boolean          @default(true) @map("is_active")
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  carts                Cart[]
  client               Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  orders               EcommerceOrder[]

  @@unique([clientId, code])
  @@map("coupons")
}

model Wishlist {
  id         String         @id @default(uuid())
  customerId String         @map("customer_id")
  name       String         @default("Minha Lista")
  isPublic   Boolean        @default(false) @map("is_public")
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  items      WishlistItem[]
  customer   Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("wishlists")
}

model WishlistItem {
  id         String   @id @default(uuid())
  wishlistId String   @map("wishlist_id")
  productId  String   @map("product_id")
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
  @@map("wishlist_items")
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TRIAL
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  EMPLOYEE
  CLIENT
  GUEST
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PropertyType {
  HOUSE
  APARTMENT
  COMMERCIAL
  LAND
  FARM
  WAREHOUSE
}

enum PropertyStatus {
  AVAILABLE
  RESERVED
  SOLD
  RENTED
  MAINTENANCE
  INACTIVE
}

enum VisitStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  NEGOTIATING
  CLOSED_WON
  CLOSED_LOST
}

enum LeadPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
  TRANSFER
  LOSS
  RETURN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

enum CartStatus {
  ACTIVE
  ABANDONED
  CONVERTED
  EXPIRED
}

enum EcommerceOrderStatus {
  PENDING
  PAID
  CONFIRMED
  PROCESSING
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
  RETURNED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BANK_SLIP
  BANK_TRANSFER
  CASH
  PAYPAL
  OTHER
}

enum ShipmentStatus {
  PREPARING
  SHIPPED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RETURNED
}

enum CouponType {
  PERCENTAGE
  FIXED
  FREE_SHIPPING
}

enum ScheduleStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

enum SchedulePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ScheduleCategory {
  WORK
  PERSONAL
  MEETING
  APPOINTMENT
  REMINDER
  OTHER
}

model Schedule {
  id                String             @id @default(uuid())
  clientId          String             @map("client_id")
  userId            String             @map("user_id")
  employeeId        String?            @map("employee_id")
  date              DateTime           // Data específica do calendário
  title             String
  description       String?
  tasks             Json               @default("[]") // Array de tarefas do dia
  status            ScheduleStatus     @default(PENDING)
  priority          SchedulePriority   @default(MEDIUM)
  startTime         DateTime?          @map("start_time")
  endTime           DateTime?          @map("end_time")
  allDay            Boolean            @default(false) @map("all_day")
  isRecurring       Boolean            @default(false) @map("is_recurring")
  recurringPattern  Json?              @map("recurring_pattern") // Padrão de recorrência
  color             String?            // Cor para categorização visual
  category          ScheduleCategory   @default(WORK)
  reminders         Json               @default("[]") // Configurações de lembretes
  attachments       String[]           @default([]) // URLs de anexos
  isPublic          Boolean            @default(false) @map("is_public")
  completedAt       DateTime?          @map("completed_at")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")

  // Relacionamentos
  client   Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  employee Employee? @relation(fields: [employeeId], references: [id], onDelete: SetNull)

  // Índices para performance
  @@index([clientId, date]) // Busca por data
  @@index([clientId, userId, date]) // Busca por usuário e data
  @@index([clientId, status]) // Filtros por status
  @@index([clientId, priority]) // Filtros por prioridade
  @@index([clientId, category]) // Filtros por categoria
  @@index([employeeId, date]) // Agenda do funcionário
  @@unique([clientId, userId, date]) // Um registro por usuário por dia
  @@map("schedules")
}

// ✅ Cache Metadata para sistema de cache inteligente do frontend
model CacheMetadata {
  id          String   @id @default(uuid())
  clientId    String   @map("client_id")
  cacheKey    String   @map("cache_key")
  lastUpdated DateTime @map("last_updated")
  version     String?  // Hash opcional dos dados
  dataSize    Int?     @map("data_size") // Tamanho dos dados em bytes
  hitCount    Int      @default(0) @map("hit_count") // Contador de acessos
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relacionamento com cliente
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  // Índices compostos para performance
  @@unique([clientId, cacheKey])
  @@index([clientId, cacheKey])
  @@index([clientId, lastUpdated])
  @@map("frontend_cache_metadata")
}
